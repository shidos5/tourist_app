-- Enable RLS (Row Level Security)
alter table public.todos enable row level security;
alter table public.trips enable row level security;
alter table public.profiles enable row level security;

-- Create profiles table
create table public.profiles (
  id uuid references auth.users on delete cascade,
  username text,
  avatar_url text,
  bio text,
  updated_at timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key (id)
);

-- Create trips table
create table public.trips (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade,
  destination text not null,
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  pace text,
  interests text[],
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create todos table
create table public.todos (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade,
  trip_id bigint references public.trips(id) on delete cascade,
  task text not null,
  is_completed boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Policies for profiles
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Policies for trips
create policy "Trips are viewable by owner"
  on trips for select
  using ( auth.uid() = user_id );

create policy "Users can create their own trips"
  on trips for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own trips"
  on trips for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own trips"
  on trips for delete
  using ( auth.uid() = user_id );

-- Policies for todos
create policy "Todos are viewable by owner"
  on todos for select
  using ( auth.uid() = user_id );

create policy "Users can create their own todos"
  on todos for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own todos"
  on todos for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own todos"
  on todos for delete
  using ( auth.uid() = user_id );

-- Create favorites table
create table public.favorites (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles(id) on delete cascade,
  city_name text not null,
  city_description text,
  city_rating float8,
  city_attractions int,
  city_image_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS
alter table public.favorites enable row level security;

-- Policies for favorites
create policy "Favorites are viewable by owner"
  on favorites for select
  using ( auth.uid() = user_id );

create policy "Users can create their own favorites"
  on favorites for insert
  with check ( auth.uid() = user_id );

create policy "Users can delete their own favorites"
  on favorites for delete
  using ( auth.uid() = user_id );
